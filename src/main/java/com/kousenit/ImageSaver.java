package com.kousenit;

import dev.langchain4j.data.image.Image;
import dev.langchain4j.model.output.Response;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.UUID;

/**
 * Utility class to save images generated by LangChain4j models.
 * This replaces the persistTo() functionality that was removed in LangChain4j 1.0.0-beta2.
 */
public class ImageSaver {

    /**
     * Save the image from a LangChain4j Image Response to a directory
     *
     * @param imageResponse The Response<Image> from an image generation model
     * @param directoryPath The directory where the image should be saved (must exist)
     * @return The path to the saved image file, or null if saving failed
     */
    public static Path saveImage(Response<Image> imageResponse, String directoryPath) {
        // Generate a unique filename
        String filename = "generated_image_" + UUID.randomUUID() + ".png";
        Path outputPath = Paths.get(directoryPath, filename);

        // Check if the directory exists
        if (!Files.exists(Paths.get(directoryPath)) || !Files.isDirectory(Paths.get(directoryPath))) {
            System.err.println("Directory doesn't exist: " + directoryPath);
            return null;
        }

        // Try to save the image
        Image image = imageResponse.content();

        // 1. Try base64 data first
        String base64Data = image.base64Data();
        if (base64Data != null && !base64Data.isEmpty()) {
            return saveBase64Image(base64Data, outputPath);
        }
        // 2. Fall back to URL if available
        else if (image.url() != null) {
            return downloadAndSaveImage(image.url().toString(), outputPath);
        } else {
            System.err.println("Image has neither base64 data nor URL - cannot save");
            return null;
        }
    }

    /**
     * Save an image from its base64 encoded data
     */
    private static Path saveBase64Image(String base64Data, Path outputPath) {
        try {
            byte[] imageData = Base64.getDecoder().decode(base64Data);
            Files.write(outputPath, imageData);
            System.out.println("Image saved to: " + outputPath);
            return outputPath;
        } catch (IOException e) {
            System.err.println("Error saving image: " + e.getMessage());
            return null;
        }
    }

    /**
     * Download and save an image from a URL
     */
    private static Path downloadAndSaveImage(String imageUrl, Path outputPath) {
        try (var client = HttpClient.newHttpClient()) {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(imageUrl))
                    .build();

            HttpResponse<byte[]> response = client.send(request,
                    HttpResponse.BodyHandlers.ofByteArray());

            if (response.statusCode() == 200) {
                Files.write(outputPath, response.body());
                System.out.println("Image downloaded and saved to: " + outputPath);
                return outputPath;
            } else {
                System.err.println("Failed to download image. Status code: " + response.statusCode());
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error downloading image: " + e.getMessage());
            return null;
        }
    }
}